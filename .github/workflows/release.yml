name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v[0-9]+.*'

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: love
            asset_name: love-linux-amd64
            archive_format: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: love
            asset_name: love-linux-arm64
            archive_format: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: love
            asset_name: love-darwin-amd64
            archive_format: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: love
            asset_name: love-darwin-arm64
            archive_format: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: love.exe
            asset_name: love-windows-amd64
            archive_format: zip

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}

      - name: Get version from tag
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update version in Cargo.toml
        shell: bash
        run: |
          sed -i.bak "s/^version = \".*\"/version = \"${{ steps.get_version.outputs.VERSION }}\"/" Cargo.toml

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Commit version update
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          git add Cargo.toml
          git commit -m "chore: bump version to ${{ steps.get_version.outputs.VERSION }}"
          git push origin HEAD:${{ github.event.repository.default_branch }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare archive directory
        shell: bash
        run: |
          mkdir -p "love-${{ steps.get_version.outputs.VERSION }}"
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} "love-${{ steps.get_version.outputs.VERSION }}/"
          cp README.md LICENSE* "love-${{ steps.get_version.outputs.VERSION }}/"

      - name: Create archive (Unix)
        if: matrix.archive_format == 'tar.gz'
        run: |
          tar -czf "${{ matrix.asset_name }}-${{ steps.get_version.outputs.VERSION }}.tar.gz" "love-${{ steps.get_version.outputs.VERSION }}"

      - name: Create archive (Windows)
        if: matrix.archive_format == 'zip'
        run: |
          7z a "${{ matrix.asset_name }}-${{ steps.get_version.outputs.VERSION }}.zip" "love-${{ steps.get_version.outputs.VERSION }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}-${{ steps.get_version.outputs.VERSION }}.${{ matrix.archive_format }}
          path: ${{ matrix.asset_name }}-${{ steps.get_version.outputs.VERSION }}.${{ matrix.archive_format }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Display structure
        run: ls -R

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            love-linux-amd64-${{ steps.get_version.outputs.VERSION }}.tar.gz/love-linux-amd64-${{ steps.get_version.outputs.VERSION }}.tar.gz
            love-linux-arm64-${{ steps.get_version.outputs.VERSION }}.tar.gz/love-linux-arm64-${{ steps.get_version.outputs.VERSION }}.tar.gz
            love-darwin-amd64-${{ steps.get_version.outputs.VERSION }}.tar.gz/love-darwin-amd64-${{ steps.get_version.outputs.VERSION }}.tar.gz
            love-darwin-arm64-${{ steps.get_version.outputs.VERSION }}.tar.gz/love-darwin-arm64-${{ steps.get_version.outputs.VERSION }}.tar.gz
            love-windows-amd64-${{ steps.get_version.outputs.VERSION }}.zip/love-windows-amd64-${{ steps.get_version.outputs.VERSION }}.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}